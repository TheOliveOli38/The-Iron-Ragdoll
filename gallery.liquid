---
layout: layout.liquid
title: Gallery
desc: A bunch of pictures I drew.
---

<div class="tags">
	<p class="collapsible">Tags (click to expand)</p>
	<div class="collapsible-content">
		{% for tag in tags %}
			<div name="{{ tag }}">{{ tag }}</div>
		{% endfor %}
	</div>
</div>

<div id="gallery">
	{% for img in gallery %}
		<div class="{% for c in img.ch %}{{ c }} {% endfor %}">
			{% if img.comment %}
				<div class="tooltip">
					<span class="tooltip-text">Comment attached</span>
					<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-ellipsis"><circle cx="12" cy="12" r="1"/><circle cx="19" cy="12" r="1"/><circle cx="5" cy="12" r="1"/></svg>
				</div>
			{% endif %}
			{% image "gallery/" img.name img.type 200 "" %}
			<div class="modal">
				<div class="close">
					<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="square" stroke-linejoin="miter" class="lucide lucide-x"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
				</div>
				{% assign bruhhh = img.name | append: "." | append: img.type %}
				{% imageOrig "gallery/" bruhhh "" %}
				{% if img.comment %}
					<div class="comment">
						{{ img.comment | renderMD }}
					</div>
				{% endif %}
			</div>
		</div>
	{% endfor %}
</div>
{% comment %} <div id="modals">
	{% for img in gallery %}
		<div class="modal">
			<div class="close">
				<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="square" stroke-linejoin="miter" class="lucide lucide-x"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>
			</div>
			{% assign bruhhh = img.name | append: "." | append: img.type %}
			{% imageOrig "gallery/" bruhhh "" %}
			{% if img.comment %}
				<div class="comment">
					{{ img.comment | renderMD }}
				</div>
			{% endif %}
		</div>
	{% endfor %}
</div> {% endcomment %}
<script>
// see image
let divs = document.getElementById('gallery').children;
// let modals = document.getElementById('modals').children;
for(let z = 0; z < divs.length; z++) {
	let img = divs[z].querySelector('img');
	img.addEventListener('click', e => {
		// let modal = modals[z];
		let modal = divs[z].querySelector('.modal');
		let close = modal.querySelector('.close');
		modal.style.display = 'flex';
		document.body.style.overflow = 'hidden';
		close.addEventListener('click', e => {
			modal.style.display = 'none';
			document.body.style.overflow = 'auto';
		});
	});
}
// tags
let filter = [];
let tags = document.querySelector('.tags').querySelector('.collapsible-content').children;
for(let z = 0; z < tags.length; z++) {
	tags[z].addEventListener('click', e => {
		if(tags[z].classList.contains('active')) {
			tags[z].classList.remove('active');
			filter.splice(filter.indexOf(tags[z].getAttribute('name')), 1);
		} else {
			tags[z].classList.add('active');
			filter.push(tags[z].getAttribute('name'));
		}
		filterImgs()
	});
}
function filterImgs() {
	for(let z = 0; z < divs.length; z++) {
		if(filter.every(f => divs[z].classList.contains(f))) {
			divs[z].classList.remove('hidden');
		} else {
			divs[z].classList.add('hidden');
		}
	}
}
function elt(type,props,...children){let dom=document.createElement(type);if(props)Object.assign(dom,props);for(let child of children){if(typeof child!="string")dom.appendChild(child);else dom.appendChild(document.createTextNode(child));}return(dom);}
</script>